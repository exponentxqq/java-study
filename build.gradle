plugins {
    id "com.diffplug.gradle.spotless" version "3.27.1"
}

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'jacoco'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar.enabled = false

spotless {
    java {
        target('**/*.java')
        googleJavaFormat()
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'jacoco'

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'com.google.guava:guava:27.0.1-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    }

    test {
        useJUnitPlatform()
    }
}

def reportSubprojects() {
    return subprojects.findAll {
        (new File("${it.projectDir}/src/test/java").isDirectory())
    }
}

task jacocoMergeAll(type: JacocoMerge) {
    dependsOn(subprojects.test, subprojects.jacocoTestReport)
    reportSubprojects().each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/generated/**')
        }))
    }
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(jacocoMergeAll)
    sourceDirectories.from = files(reportSubprojects().sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(reportSubprojects().sourceSets.main.output)
    executionData.from = files("${buildDir}/jacoco/jacocoMergeAll.exec")

    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = true
    }
}
