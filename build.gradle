plugins {
    id "com.diffplug.gradle.spotless" version "3.27.1"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'jacoco'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar.enabled = false

spotless {
    java {
        target('**/*.java')
        googleJavaFormat()
    }
}

allprojects() {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'com.diffplug.gradle.spotless'
    apply plugin: 'jacoco'

    gradle.projectsEvaluated() {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

subprojects() {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        dependencies {
            // javax
            dependency 'javax.annotation:javax.annotation-api:1.3.2'

            // 分析java对象内存布局
            dependency 'org.openjdk.jol:jol-core:0.16'

            // 工具集合
            dependency 'com.google.guava:guava:27.0.1-jre'

            // netty
            dependency 'io.netty:netty-all:4.1.65.Final'
            dependency 'com.google.protobuf:protobuf-java:3.15.3'

            // 网络请求工具
            dependency 'org.apache.httpcomponents:httpclient:4.5.5'
            dependency 'org.apache.httpcomponents:httpasyncclient:4.1.4'
            dependency 'com.squareup.okhttp3:okhttp:4.7.2'

            // spring
            // spring 核心库，其他spring模块大都依赖该库
            dependency 'org.springframework:spring-core:5.2.16.RELEASE'
            // spring-aspects-aop依赖
            dependency 'org.springframework:spring-aop:5.2.16.RELEASE'
            dependency 'org.springframework:spring-aspects:5.2.16.RELEASE'
            // spring IOC依赖
            dependency 'org.springframework:spring-context:5.2.16.RELEASE'

            // spring boot
            dependency 'org.springframework.boot:spring-boot-autoconfigure:2.3.12.RELEASE'
            // 自定义starter必须依赖的库
            dependency 'org.springframework.boot:spring-boot-starter:2.3.12.RELEASE'
            // 自定义starter引用后，依赖starter的项目可以提示starter的相关properties配置
            dependency 'org.springframework.boot:spring-boot-configuration-processor:2.3.12.RELEASE'

            // database数据库相关
            dependency 'mysql:mysql-connector-java:8.0.26'
            dependency 'org.mybatis:mybatis:3.5.7'

            // 单元测试
            dependency 'org.junit.jupiter:junit-jupiter:5.7.0'
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'com.google.guava:guava'
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    test {
        useJUnitPlatform()
    }
}

project(':modules:spring:boot') {
    dependencies {
        compile project(':modules:spring:boot:starter')
    }
}

def reportSubprojects() {
    return subprojects.findAll {
        (new File("${it.projectDir}/src/test/java").isDirectory())
    }
}

task jacocoMergeAll(type: JacocoMerge) {
    dependsOn(subprojects.test, subprojects.jacocoTestReport)
    reportSubprojects().each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/generated/**')
        }))
    }
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(jacocoMergeAll)
    sourceDirectories.from = files(reportSubprojects().sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(reportSubprojects().sourceSets.main.output)
    executionData.from = files("${buildDir}/jacoco/jacocoMergeAll.exec")

    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = true
    }
}
