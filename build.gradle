plugins {
    id "com.diffplug.spotless" version "5.0.0"
    id "io.spring.dependency-management" version "1.1.3"
}

apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'jacoco'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar.enabled = false

spotless {
    java {
        target '**/*.java'
//        targetExclude '**/generated/**'

        googleJavaFormat()
        removeUnusedImports()
        endWithNewline()
        trimTrailingWhitespace()
    }
}

java {
    sourceCompatibility = '17'
}


allprojects() {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'jacoco'

    gradle.projectsEvaluated() {
        tasks.withType(JavaCompile).tap {
            configureEach {
                options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            }
        }
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

subprojects() {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: 'io.spring.dependency-management'

    dependencyManagement {
        dependencies {
            // javax
            dependency 'javax.annotation:javax.annotation-api:1.3.2'

            // 分析java对象内存布局
            dependency 'org.openjdk.jol:jol-core:0.16'

            // 工具集合
            dependency 'com.google.guava:guava:27.0.1-jre'

            // netty
            dependency 'io.netty:netty-all:4.1.65.Final'
            dependency 'com.google.protobuf:protobuf-java:3.15.3'

            // 网络请求工具
            dependency 'org.apache.httpcomponents:httpclient:4.5.5'
            dependency 'org.apache.httpcomponents:httpasyncclient:4.1.4'
            dependency 'com.squareup.okhttp3:okhttp:4.7.2'

            // spring
            // spring 核心库，其他spring模块大都依赖该库
            dependency 'org.springframework:spring-core:6.0.2'
            // spring-aspects-aop依赖
            dependency 'org.springframework:spring-aop:6.0.2'
            dependency 'org.springframework:spring-aspects:6.0.2'
            // spring IOC依赖
            dependency 'org.springframework:spring-context:6.0.2'

            // spring boot
            dependency 'org.springframework.boot:spring-boot-autoconfigure:3.0.2'
            // 自定义starter必须依赖的库
            dependency 'org.springframework.boot:spring-boot-starter:3.0.2'
            // 自定义starter引用后，依赖starter的项目可以提示starter的相关properties配置
            dependency 'org.springframework.boot:spring-boot-configuration-processor:3.0.2'

            // database数据库相关
            dependency 'mysql:mysql-connector-java:8.0.26'
            dependency 'org.mybatis:mybatis:3.5.7'

            // 单元测试
            dependency 'org.junit.jupiter:junit-jupiter:5.7.0'
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'
        implementation 'ch.qos.logback:logback-classic:1.2.3'
        implementation 'com.google.guava:guava'
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    test {
        useJUnitPlatform()
    }
}

project(':modules:spring:boot') {
    dependencies {
        implementation project(':modules:spring:boot:starter')
    }
}

tasks.register('testRootReport', TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn subprojects*.test {
        ignoreFailures = true
    }
}

tasks.register('jacocoRootReport', JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'

    // 需要生成test.exec的子模块(如果不排除不生成单测的模块，执行gradle jacocoRootReport会报找不到该模块的test.exec)
    def projects = []
    def jacocoProjects = subprojects.findAll { projects.contains(it.getName()) }
    doFirst {
        jacocoProjects.forEach(printProjectName)
    }

    additionalSourceDirs.from = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(jacocoProjects.sourceSets.main.output)
    executionData.from = files(jacocoProjects.jacocoTestReport.executionData)

    reports {
        html.required = true
        xml.required = false
        csv.required = true
    }
}