////////////////////////////////////////////////////////////////////////////
// 获取自：
//  javac -g Demo.java        -g参数可以带上变量名称LocalVariableTable
//  javap -c -verbose Demo    当javac带上-g参数时，会输出LocalVariableTable信息
////////////////////////////////////////////////////////////////////////////

Classfile /Users/xuqinqin/develop/person/java/study/src/main/java/com/exp/jvm/bytecode/Demo.class
  Last modified 2021年6月22日; size 431 bytes
  SHA-256 checksum faaf43fac26e9771b2efdf5278824de7a9d999ee80719f8334aacd24f5563e9f
  Compiled from "Demo.java"

////////////////////////////////////////////////////////////////////////////
// major version的版本减去44就是jdk版本
////////////////////////////////////////////////////////////////////////////
public class com.exp.jvm.bytecode.Demo
  minor version: 0
  major version: 57
  flags: (0x0021) ACC_PUBLIC, ACC_SUPER
  this_class: #7                          // com/exp/jvm/bytecode/Demo
  super_class: #2                         // java/lang/Object
  interfaces: 0, fields: 0, methods: 2, attributes: 1

////////////////////////////////////////////////////////////////////////////
// 常量池，常量池中的常量可以由别的常量组合而成，如#1就是由#2和#3组合而成的
////////////////////////////////////////////////////////////////////////////
Constant pool:
   #1 = Methodref          #2.#3          // java/lang/Object."<init>":()V
   #2 = Class              #4             // java/lang/Object
   #3 = NameAndType        #5:#6          // "<init>":()V
   #4 = Utf8               java/lang/Object
   #5 = Utf8               <init>
   #6 = Utf8               ()V
   #7 = Class              #8             // com/exp/jvm/bytecode/Demo
   #8 = Utf8               com/exp/jvm/bytecode/Demo
   #9 = Methodref          #7.#3          // com/exp/jvm/bytecode/Demo."<init>":()V
  #10 = Utf8               Code
  #11 = Utf8               LineNumberTable
  #12 = Utf8               LocalVariableTable
  #13 = Utf8               this
  #14 = Utf8               Lcom/exp/jvm/bytecode/Demo;
  #15 = Utf8               main
  #16 = Utf8               ([Ljava/lang/String;)V
  #17 = Utf8               args
  #18 = Utf8               [Ljava/lang/String;
  #19 = Utf8               demo
  #20 = Utf8               SourceFile
  #21 = Utf8               Demo.java
{
  ////////////////////////////////////////////////////////////////////////////
  // Demo类的默认的无参构造函数
  // stack=1, locals=1, args_size=1   栈长度1，本地变量1，参数1
  //   0: aload_0           将本地变量表里第0个位置的变量加载到栈里
  //   1: invokespecial #1  第一步占用了1个字节，调用Method java/lang/Object的初始化方法
  //   4: return            第二步占用了4-1=3个字节（其中指令占一个字节，#1占用两个字节）
  //                      第三步return要占用1个字节
  ////////////////////////////////////////////////////////////////////////////
  public com.exp.jvm.bytecode.Demo();
    descriptor: ()V
    flags: (0x0001) ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #1                  // Method java/lang/Object."<init>":()V
         4: return
      LineNumberTable:
        line 6: 0
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       5     0  this   Lcom/exp/jvm/bytecode/Demo;

  ////////////////////////////////////////////////////////////////////////////
  // main方法
  // 0: new           #7    在java堆上为 Demo 对象分配内存空间，并将地址压入操作数栈顶
  // 3: dup                 复制操作数栈顶值，并将其压入栈顶，此时操作数栈上有连续相同的两个对象地址
  //                        由于此时程序员是无法访问到this的，所以没有办法使用aload指令将this压入栈中，因此只能是编译器使用dup
  // 4: invokespecial #9    Demo的初始化方法是一个实例方法，所以需要从操作数栈顶弹出一个Demo对象的this引用，即这一步会弹出一个之前入栈的对象地址
  // 7: astore_1            从栈中获取变量到本地
  // 8: return
  //
  // LineNumberTable:
  //     line 8: 0          第0位的指令出现在原始代码文件的第8行
  //     line 9: 8          第8位的指令出现在原始代码文件的第9行
  ////////////////////////////////////////////////////////////////////////////
  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=2, args_size=1
         0: new           #7                  // class com/exp/jvm/bytecode/Demo
         3: dup
         4: invokespecial #9                  // Method "<init>":()V
         7: astore_1
         8: return
      LineNumberTable:
        line 8: 0
        line 9: 8
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0       9     0  args   [Ljava/lang/String;
            8       1     1  demo   Lcom/exp/jvm/bytecode/Demo;

  ////////////////////////////////////////////////////////////////////////////
  // 每个类成员方法，第一个变量一定是this，然后是方法参数，然后才是方法内局部变量
  // 类成员变量跟随类实例存放在堆内存中，不在线程栈中
  // 7: pop     dup操作会复制操作数栈顶值，但该方法中不需要获取new出来的对象，因此要将多余的一个值pop掉
  ////////////////////////////////////////////////////////////////////////////
  public void main(int);
      descriptor: (I)V
      flags: (0x0001) ACC_PUBLIC
      Code:
        stack=2, locals=2, args_size=2
           0: new           #7                  // class com/exp/jvm/bytecode/Demo
           3: dup
           4: invokespecial #9                  // Method "<init>":()V
           7: pop
           8: return
        LineNumberTable:
          line 8: 0
          line 9: 8
        LocalVariableTable:
          Start  Length  Slot  Name   Signature
              0       9     0  this   Lcom/exp/jvm/bytecode/Demo;
              0       9     1     a   I

  ////////////////////////////////////////////////////////////////////////////
  // 0: iconst_1        声明一个变量并放到本地变量表1（0被this占用了），并压到操作数栈中
  // 1: istore_1        从栈中load变量1到变量表中（此时操作栈长度为0,this不在栈中）
  // ...
  // 6: iload_1         将变量1压到栈中，用于后续计算
  // 7: iload_2         将变量2压到栈中，用于后续计算
  // 8: iadd            将栈顶的两个变量相加并将结果放到栈里（此时栈长度为1）
  // 9: iload_3         将变量3压到栈中，用于后续计算
  // 10: iadd           将栈顶的两个变量相加并将结果放到栈里（此时栈长度为1）
  // 11: istore   4     将栈顶的值(最后一次相加的结果)load到变量4中(赋值给d)
  // 13: iload    4     将变量4压到栈中，用于return
  // 15: ireturn        将栈顶的值pop并返回，结束
  ////////////////////////////////////////////////////////////////////////////
  public int sum();
      descriptor: ()I
      flags: (0x0001) ACC_PUBLIC
      Code:
        stack=2, locals=5, args_size=1
           0: iconst_1
           1: istore_1
           2: iconst_2
           3: istore_2
           4: iconst_3
           5: istore_3
           6: iload_1
           7: iload_2
           8: iadd
           9: iload_3
          10: iadd
          11: istore        4
          13: iload         4
          15: ireturn
        LineNumberTable:
          line 12: 0
          line 13: 2
          line 14: 4
          line 16: 6
          line 17: 13
        LocalVariableTable:
          Start  Length  Slot  Name   Signature
              0      16     0  this   Lcom/exp/jvm/bytecode/Demo;
              2      14     1     a   I
              4      12     2     b   I
              6      10     3     c   I
             13       3     4     d   I

}
SourceFile: "Demo.java"
